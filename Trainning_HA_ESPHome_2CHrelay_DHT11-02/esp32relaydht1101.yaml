esphome:
  name: esp32relaydht1101
  friendly_name: esp32relaydht1101

esp32:
  board: esp32dev
  framework:
    type: arduino

substitutions:
  esp_name: esp32relaydht11

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "b1Ss7fXiTZ3FxPZIaYGM/BTxPWgr31tb56WmKvBdxIg="

ota:
  - platform: esphome
    password: "a688d1aa29c8765786219274024c3b8d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.56
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0
    dns1: 192.168.1.1
  
  # Use the on_connect trigger to turn on GPIO2
  on_connect:
    then:
      - switch.turn_on: gpio2

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32Relaydht1101"
    password: "12345678"

time:
  - platform: homeassistant
    id: homeassistant_time

captive_portal:

binary_sensor:
  - platform: status
    name: "WiFi Status"
    id: wifi_status

switch:
#Relay1
  - platform: gpio
    id: sw1
    name: "Switch1"
    pin: 32
    restore_mode: RESTORE_DEFAULT_OFF
    inverted: true
#Relay2
  - platform: gpio
    id: sw2
    name: "Switch2"
    pin: 33
    restore_mode: RESTORE_DEFAULT_OFF
    inverted: true

# Add a switch for GPIO2
  - platform: gpio
    id: gpio2
    pin: 2
    restore_mode: ALWAYS_OFF

# Turn on GPIO2 when WiFi is connected
  - platform: template
    name: "WiFi Connected Switch"
    turn_on_action:
      then:
        - switch.turn_on: gpio2
    lambda: |-
      return id(wifi_status).state;       

sensor:
   #DHT11/DHT22
  - platform: dht
    pin: 18
    temperature:
      name: "DHT11Temperature"
      id: dhttemp
    humidity:
      name: "DHT11Humidity"
      id: dhthumi
    update_interval: 10s

  - platform: uptime
    name: "${esp_name} - Uptime"
    icon: mdi:clock-outline
    update_interval: 60s
  
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${esp_name} - WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${esp_name} - WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
