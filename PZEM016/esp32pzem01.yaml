esphome:
  name: esp32powermon01
  friendly_name: esp32powermon01

esp32:
  board: esp32dev
  framework:
    type: arduino

substitutions:
  esp_name: pzem016modbus
  # Higher value gives lower watt readout
  current_res: "0.00520"
  # Lower value gives lower voltage readout
  voltage_div: "750"

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "DWQNW5wp5GC8NhoR/XZvd4/qksbCo4Tepk="

ota:
  - platform: esphome
    password: !secret ota_password2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.90
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  # Use the on_connect trigger to turn on GPIO2
  on_connect:
    then:
      - switch.turn_on: gpio2
      
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32Powermon01 Fallback Hotspot"
    password: "0814111142"
  
time:
  - platform: homeassistant
    id: homeassistant_time
    
captive_portal:

uart:
  id: mod_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600
  stop_bits: 1
  parity: none
  data_bits: 8

#Modbus Sensor & Modbus Relay
modbus:
  flow_control_pin: 5
  id: modbus_sensor

modbus_controller:
# Modbus device addr slave id1 - Modbus XY-MD02 Temp & Humi
  - id: xymd02_01
    address: 0x2
    modbus_id: modbus_sensor
    command_throttle: 200ms
    setup_priority: -10
    update_interval: 10s

binary_sensor:
  - platform: status
    name: "WiFi Status"
    id: wifi_status

switch:
# Add a switch for GPIO2
  - platform: gpio
    id: gpio2
    pin: 2
    restore_mode: ALWAYS_OFF

# Turn on GPIO2 when WiFi is connected
  - platform: template
    name: "WiFi Connected Switch"
    turn_on_action:
      then:
        - switch.turn_on: gpio2
    lambda: |-
      return id(wifi_status).state;

sensor:
  - platform: pzemac
    id: pzemac_1
    address: 0x1
    modbus_id: modbus_sensor

    current:
      name: "Current"
      id: cur
    voltage:
      name: "Voltage"
      id: vol
    power:
      name: "Power"
      id: power
      state_class: measurement

    frequency:
      name: "Frequency"
      id: freq
    power_factor:
      name: "Power Factor"
      id: pow_factor
    update_interval: 5s

  - platform: total_daily_energy
    name: "Total Daily Energy"
    unit_of_measurement: kWh
    filters:
      - multiply: 0.001
    power_id: power
  
  - platform: uptime
    name: "${esp_name} - Uptime"
    icon: mdi:clock-outline
    update_interval: 60s
  
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${esp_name} - WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${esp_name} - WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

button:
  - platform: template
    name: Reset Energy ID1
    on_press:
      - pzemac.reset_energy: pzemac_1   
